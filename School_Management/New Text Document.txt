#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> // Include the usleep function
#include <time.h>
#include <windows.h>

#define FILENAME "students.txt"
#define MAX_STUDENTS 1000

// ANSI escape codes for text color (Windows)
#define COLOR_RESET "\033[0m"
#define COLOR_YELLOW "\033[1;33m"
#define COLOR_CYAN "\033[1;36m"
#define ANSI_COLOR_RED "\x1b[31m"
#define ANSI_COLOR_GREEN "\x1b[32m"
#define ANSI_COLOR_YELLOW "\x1b[33m"
#define ANSI_COLOR_BLUE "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN "\x1b[36m"
#define ANSI_COLOR_RESET "\x1b[0m"



typedef struct person
{
    char name[30];
    int age;
    char phone[11];

} person;

typedef struct student
{
    char name[30];
    int age;
    int ID;
    char grade;
    int NoOfbrothers;
    person father;
    person mother;
    person *brothers;

}student;

void add_NewStudent(student *s);
void editStudent(student *arr , int size , student *s);
int removeStudent(student *arr , int *size);
void scanString(char *str, int maxSize);
void printStudent(student s);
void printAll(student *arr , int size);
void string_UppertoLower(char *str);
int string_CompareNotSensetiveCase(char *str1, char *str2);
int loadStudents(student *arr, int *size);
int saveStudents(const student *arr, int size);
void delay(int seconds);
void options();
void welcomeMessage();
void byeMessage();


void scanString(char *str, int maxSize)
{
    int i = 0;
    // printf("Enter your name: ");
    fflush(stdin);
    scanf("%c", &str[i]);
    for (; str[i] != '\n' && i < maxSize - 1;)
    {
        i++;
        scanf("%c", &str[i]);
    }
    str[i] = 0;
}
void add_NewStudent(student *s)
{
    welcomeMessage();
    printf("Please Enter Student Data\n--------------------------------\n");
    printf("Student First Name: ");
    // scanString(s.name, 20);
    scanf("%s", &(*s).name);
    printf("Enter Student Age: ");
    scanf("%d", &(*s).age);
    /*printf("Student Grade: ");
    scanf(" %c", &(*s).grade);*/

    printf("Last name: ");
    scanf(" %s", &(*s).father.name);
    printf("Student Father Age: ");
    scanf("%d", &(*s).father.age);
    printf("Father Phone number: ");
    // scanf("%s", &(*s).father.phone);
    scanString(s->father.phone, 12);
    printf("Student Mother name: ");
    scanf("%s", &(*s).mother.name);
    printf("Student Mother Age: ");
    scanf("%d", &(*s).mother.age);
    printf("Student Mother Phone number: ");
    // scanf("%s", &(*s).mother.phone);
    scanString(s->mother.phone, 12);
    printf("Student Num of Brothers: ");
    scanf("%d", &(*s).NoOfbrothers);
    s->brothers = malloc((s->NoOfbrothers) * sizeof(person));
    if (s->NoOfbrothers >= 1)
    {
        for (int i = 0; i < s->NoOfbrothers; i++)
        {
            printf("Brother no. %d name : ", i + 1);
            scanf("%s", &s->brothers[i].name);
            printf("Brother no. %d age : ", i + 1);
            scanf("%d", &s->brothers[i].age);
            // printf("Brother no. %d phone : " , i+1);
            fflush(stdin);
        }
    }
    printf(ANSI_COLOR_GREEN "\n------------------------------\n--> The Student data has been to registered ! <-- \n---------------------------\n" ANSI_COLOR_RESET);
}
void editingOptions()
{
}
void editStudent(student *arr, int size, student *s)
{
    int select, found = 0, index = -1, options = 0, firstEntry = 0;
    char continueEditing;
    ;
    printf(ANSI_COLOR_GREEN "Please Enter the name of student or ID number to edit him from the School:\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_YELLOW "Press:\n1: ID          2: Name\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_GREEN "=====\n==> Choice No. ");
    scanf("%d", &select);
    printf("=====\n" ANSI_COLOR_RESET);

    switch (select)
    {
    case 1:
        printf(ANSI_COLOR_GREEN "ID: ");
        scanf("%d", &(s->ID));
        printf("========\n" ANSI_COLOR_RESET);
        break;
    case 2:
        printf(ANSI_COLOR_GREEN "Name: ");
        scanf("%s%s", s->name, s->father.name);
        printf("==========\n" ANSI_COLOR_RESET);
        break;

    default:
        break;
    }
    for (int i = 0; i < size; i++)
    {
        if (((select == 1) && (arr[i].ID == s->ID)) ||
            (select == 2) && (((string_CompareNotSensetiveCase(arr[i].name, s->name) == 1) && (string_CompareNotSensetiveCase(arr[i].father.name, s->father.name) == 1))))

        {
            found = 1;
            index = i;
            delay(1);
            printf(ANSI_COLOR_GREEN "====================================================\n");
            printf("It's Found !\n");
            printf("====================================================\n" ANSI_COLOR_RESET);
            printf("Now you can update your data:\n--------------------------------\n");
            printf("0. Back to main menu\n 1. First Name.                 2. Last Name.\n3. Student Age.                4. Student Father Age.\n5. Student Grade.              6. Student ID.\n7. Father Phone number.        8. Mother Phone number.\n9. Num of Brothers.\n");
            while (1)
            {
                firstEntry++;
                if (firstEntry == 1)
                {
                    printf("Your Choice: ");
                    scanf("%d", &options);
                }
                else if (continueEditing == 'y')
                {
                    printf("Your Choice: ");
                    scanf("%d", &options);
                }
                else if (continueEditing == 'n')
                    break;
                switch (options)
                {
                case 1:
                    printf("Student First Name: ");
                    scanf("%s", arr[i].name);
                    break;
                case 2:
                    printf("Last name: ");
                    scanf(" %s", arr[i].father.name);
                    break;
                case 3:
                    printf("Enter Student Age: ");
                    scanf("%d", &(arr[i].age));
                    break;
                case 4:
                    printf("Student Father Age: ");
                    scanf("%d", &(arr[i].father.age));
                    break;
                case 5:
                    printf("Student Grade: ");
                    scanf(" %c", &(arr[i].grade));
                    break;
                case 6:
                    printf("Student ID: ");
                    scanf(" %c", &(arr[i].ID));
                    break;
                case 7:
                    printf("Father Phone number: ");
                    scanf("%s", &(arr[i].father.phone));
                    break;
                case 8:
                    printf("Mother Phone number: ");
                    scanf("%s", arr[i].mother.phone);
                    break;
                case 9:
                    printf("Student Num of Brothers: ");
                    scanf("%d", &(arr[i].NoOfbrothers));
                    break;
                case 0:
                    break;
                default:
                    printf("Invalid Data Entry!\n");
                    break;
                }
                firstEntry++;
                printf("Do you want to continue editing other students? (y/n): ");
                scanf(" %c", &continueEditing);
            }

            /*arr[i].brothers = malloc((arr[i].NoOfbrothers) * sizeof(person));
            if (arr[i].NoOfbrothers >= 1)
            {
                for (int i = 0; i < arr[i].NoOfbrothers; i++)
                {
                    printf("Brother no. %d name : ", i + 1);
                    scanf("%s", arr[i].brothers[i].name);
                    printf("Brother no. %d age : ", i + 1);
                    scanf("%d", &(arr[i].brothers[i].age));
                    // printf("Brother no. %d phone : " , i+1);
                    fflush(stdin);
                }
            }*/
        }
    }
    if (found == 0)
    {
        delay(1);
        printf(ANSI_COLOR_RED "====================================================\n");
        printf("This Student doesn't exist\n");
        printf("====================================================\n" ANSI_COLOR_RESET);
    }
}

int removeStudent(student *arr, int *size)
{
    student studentToDel;
    int select, found = 0, index = -1;
    printf(ANSI_COLOR_CYAN "Please Enter the name of student or ID number to delete him from the School:\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_YELLOW "Press:\n1: ID          2: Name\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_MAGENTA "===> ");
    scanf("%d", &select);

    switch (select)
    {
    case 1:
        printf(ANSI_COLOR_GREEN "ID: ");
        scanf("%d", &studentToDel.ID);
        printf("========\n" ANSI_COLOR_RESET);
        break;
    case 2:
        printf(ANSI_COLOR_GREEN "Name: ");
        scanf("%s%s", studentToDel.name, studentToDel.father.name);
        printf("==========\n" ANSI_COLOR_RESET);
        break;
    default:
        printf("Invalid option.\n");
        return -1;
    }
    for (int i = 0; i < *size; i++)
    {
        if (((select == 1) && (arr[i].ID == studentToDel.ID)) ||
            (select == 2) && (((string_CompareNotSensetiveCase(arr[i].name, studentToDel.name) == 1) && (string_CompareNotSensetiveCase(arr[i].father.name, studentToDel.father.name) == 1))))
        {
            delay(1);
            index = i;
            found = 1;
            for (int j = i; j < *size - 1; j++)
            {
                arr[j] = arr[j + 1];
            }
            (*size)--;
            printf(ANSI_COLOR_GREEN "====================================================\n");
            printf("|| It's Found !                                   ||\n");
            printf("|| The Student Data is removed successfully       ||\n");
            printf("====================================================\n" ANSI_COLOR_RESET);
            break;
        }
    }
    if (found == 0)
    {
        delay(1);
        printf(ANSI_COLOR_RED "====================================================\n");
        printf("This Student doesn't exist\n");
        printf("====================================================\n" ANSI_COLOR_RESET);
    }

    return index;
}

void printStudent(const student s)
{
    /*printf("  FName   |   LName  |  Age  | Grade | Father Age | Phone number | Mother name | Mother Age | Phone number | Num of Brothers\n");

    printf("%-10s|  %-9s|%5d|%5c|%11d|%-13s|%-12s|%5d|%-13s|%5d\n",
           s.name, s.father.name, s.age, s.grade, s.father.age, s.father.phone,
           s.mother.name, s.mother.age, s.mother.phone, s.NoOfbrothers);*/
    printf("Student Name: %s\n", s.name);
    printf("Student Age: %d\n", s.age);
    printf("Student Grade: %c\n", s.grade);
    printf("Student ID: %d\n", s.ID);
    printf("Student Father name: %s\n", s.father.name);
    printf("Student Father Age: %d\n", s.father.age);
    printf("Student Father Phone number: %s\n", s.father.phone);
    printf("Student Mother name: %s\n", s.mother.name);
    printf("Student Mother Age: %d\n", s.mother.age);
    printf("Student Mother Phone number: %s\n", s.mother.phone);
    printf("Student Num of Brothers: %d\n", s.NoOfbrothers);
    printf("==============================================\n");

    /*if (s.NoOfbrothers >= 1)
    {
        for (int i = 0; i < s.NoOfbrothers; i++)
        {   printf("Brother no. %d name: %s: \n" , i+1 , s.brothers[i].name);
            printf("Brother no. %d age %d:   \n" , i+1 , s.brothers[i].age);
        }
    }*/
}
void printAll(student *arr, int size)
{
    printf(ANSI_COLOR_YELLOW "==============================================\n");
    printf("||         The School Student list:         ||\n");
    printf("==============================================\n" ANSI_COLOR_RESET);
    for (int i = 0; i < size && (arr[i].age != 0); i++)
    {
        printf("%d. ", i + 1);
        printStudent(arr[i]);
    }
}
void string_UppertoLower(char *str)
{
    for (int i = 0; str[i]; i++)
    {
        if (str[i] >= 'A' && str[i] <= 'Z')
        {
            str[i] = str[i] - 'A' + 'a';
        }
    }
}
int string_CompareNotSensetiveCase(char *str1, char *str2)
{
    int flag = 0;
    for (int i = 0; str1[i] || str2[i]; i++)
    {
        flag = 0;
        if ((str1[i] == str2[i]) || (str1[i] == str2[i] - 'A' + 'a') || (str2[i] == str1[i] - 'A' + 'a'))
        {
            flag = 1;
        }
        else
        {
            // printf("Not Same\n");
            return 0;
        }
    }
    if (flag == 1)
    {
        // printf("Same\n");
        return 1;
    }
}

void options()
{
    printf(ANSI_COLOR_CYAN "Please Select your option:\n");
    printf("--------------------------\n");
    printf("0: Exit From the App\n1: Add new Student to School\n2: Remove Student from the School\n3: View all registered students Data\n4: Edit Data of Student\n" ANSI_COLOR_RESET);
}
void delay(int seconds)
{
    int numDots = 14; // Number of dots in the loading animation
    printf(ANSI_COLOR_YELLOW "Loading " ANSI_COLOR_RESET);
    for (int i = 0; i < numDots; i++)
    {

        printf(ANSI_COLOR_YELLOW "." ANSI_COLOR_RESET);

        // fflush(stdout); // Flush the output to make sure dots are displayed immediately

        // Delay for 1 second (adjust the sleep time as needed)
        usleep(300000); // 1 second in microseconds
    }

    printf(ANSI_COLOR_CYAN "\n            <>-------- Done! --------<>\n" ANSI_COLOR_RESET);
}
void welcomeMessage()
{
    printf(ANSI_COLOR_GREEN "====================================================\n");
    printf("||                 Welcome to X School !           ||\n");
    printf("====================================================\n" ANSI_COLOR_RESET);
}
void byeMessage()
{
    printf(ANSI_COLOR_GREEN "====================================================\n");
    printf("||                  Thank You!                    ||\n");
    printf("||                My Best Wishes                  ||\n");
    printf("====================================================\n");
}

static student school[MAX_STUDENTS];
int main()
{
    int option, exitFlag = 0, index, i = 0, menuKey = 0;
    student std;
    person p = {"Khalaf", 50, "01092070149"}, p2 = {"Aya", 44, "0101234567"};
    person p3 = {"Samy", 60, "01050541999"}, p4 = {"Mai", 47, "0101476695"};
    student s1 = {"Mohammed", 25, 1005, 'A', 5, p, p2};
    student s2 = {"Nader", 24, 1006, 'A', 3, p3, p4};

    school[i++] = s1;
    school[i++] = s2;
    int size = sizeof(school) / sizeof(school[0]);
    welcomeMessage();
    char in;
    in = 1;
    while (1)
    {
        if (in == 2)
        {
            printf(ANSI_COLOR_MAGENTA"==> Press 1 Back to main Menu: ");
            
            scanf("%d", &menuKey);
            printf("===============================\n"ANSI_COLOR_RESET);
        }
        if (menuKey == 1 || in == 1)
        {
            options();
            printf(ANSI_COLOR_MAGENTA "-----\n==> Choice No. ");
            scanf("%d", &option);
            printf("-----\n" ANSI_COLOR_RESET);
        }
        switch (option)
        {
        case 1:
            add_NewStudent(&school[i++]);
            break;
        case 2:
            removeStudent(school, &size);
            break;
        case 3:
            printAll(school, size);
            break;
        case 4:
            editStudent(school, size, &std);
            break;
        case 0:
            exitFlag = 1;
            break;

        default:
            break;
        }
        in = 2;
        if (exitFlag == 1)
            break;
    }
    byeMessage();

    return 0;
}